Linux Live Kit SlakResQ Branch
==============================

This branch is to hold changes made to my Linux Live Kit fork for the SlakResQ
project. It incorporates the changes made to my fork, as well as changes
specific to SlakResQ.

Linux Live Kit Fork
===================

This is a fork of Tomas Matejicek's Linux Live Kit. The purpose of this fork
is for me to experiment with some tweaks and fixes of my own.

Currently, the following changes have been made to the original code:

* The boot scripts now pass parameters from the bootloader to the 'real' init
  process. This enables setting the runlevel from the boot prompt.
* Boot scripts will now try to fsck the source media (and persistence image)
  on boot, if enabled in config.
* Compression options for mksquashfs can now be specified in config. I've
  heard reports that lzo compression might yield better performance when
  running a linux-live system on older hardware.

  Note that this does not affect the scripts in the Slax/ directory, as they
  don't use the create_bundle function in livekitlib. I don't want to mess
  with them at this point as I'm not entirely sure how to go about testing it.
* Persistent changes can now be 'snapshotted'. Giving the 'snapshot' option on
  boot (along with 'perch') will create a new bundle (with a 900 serires) with
  system changes from the persistent snapshot image, then delete them from the
  changes image. This will free up space in the changes image, and on the
  underlying storage media.

  Note that home folders are not snapshotted; they remain in the changes
  image. /tmp is also not snapshotted, and is deleted before taking a
  snapshot.

  You can also specify 'snapshotquick' which will disable compression on the
  resulting snapshot. The file will be much larger, but the snapshot process
  will be much faster.

  This should work whether you're using overlayfs or aufs, and whether you're
  using a changes image on a non-posix filesystem, or 'native' persistent
  changes.

These changes have all been broken out into individual branches, so they may
be individually merged into the upstream if desired.

Changes that were made previously, that have since been (independently) fixed
in the upstream:
* Fixed shutdowns not working properly
* Loop module now gets a max_loop parameter, in case the default is too low

- Nathan Roberts <nathanr@tardislabs.com>

Linux Live Kit
==============

Use this set of scripts to turn your existing preinstalled Linux
distribution into a Live Kit (formely known as Live CD).
Make sure to extract and use it on a posix-compatible filesystem,
since it creates some (sym)links and such.

Note:

* Store Linux Live kit in a directory which is not going to be included
  in your live distro, else it would be copied to it. Best practice is to
  make a directory such as /a and put these scripts there.
  Be warned, if you put it to /tmp, some distros may erase it on reboot.

* Before you start building your Kit, edit the file ./config
  Most importantly change the LIVEKITNAME variable.

* Make sure your kernel is in /vmlinuz or change the path in ./config
  Your kernel must support squashfs. Your kernel must also support either
  aufs or overlayfs or both. AUFS is recommended for more flexibility,
  but if your distro does not support it, overlayfs will work too.

* You may also wish to replace boot graphics in ./bootfiles/bootlogo.png
  (one options is to modify and run the ./tools/bootlogo.update script) 
  and reorganize isolinux.cfg to fit your needs (when editing the file,
  keep all paths in /boot/, it will be rellocated during LiveKit creation)

* Linux Live Kit comes with precompiled static binaries in ./initramfs
  directory. Those may be outdated but will work. You may replace them
  by your own statically linked binaries, if you know how to compile them.  

* If you plan to boot your Live Kit from CD, you need to recompile
  syslinux.bin else it won't be able to boot your Live Kit from directory
  LIVEKITNAME. There is a script prepared for you which will handle all
  of that. Simply go to directory ./tools/ and run isolinux.bin.update ...
  it will update ./bootfiles/isolinux.bin automatically by downloading
  isolinux sources, patching them using your actual LIVEKITNAME and
  recompiling. This step is not needed if you plan to boot from USB only.

* If you plan to boot your Live Kit from USB device, you may wish to add
  the following boot parameter to the end of APPEND section in syslinux.cfg:
     perch
  This parameter activates persistent changes

* If you have tmpfs mounted on /tmp during building your Live Kit ISO,
  make sure you have enough RAM since LiveKit will store lots of data in /tmp.
  If you are low on RAM, make sure /tmp is a regular on-disk directory.

* When done, run the ./build script to create your Live Kit
  - it will create ISO and TAR files for you in /tmp
  - make sure you have enough free space in /tmp to handle it
  
* If you want to use the Live Kit on a USB you have to either
  - use Windows to execute the bootinst.bat file in the $NAME/boot folder
  - or use Linux to execute the shellscript bootinst.sh in the $NAME/boot folder.

* You will need the following packages to be installed:
  - squashfs-tools
  - genisoimage or mkisofs
  - zip


Author: Tomas M. <http://www.linux-live.org>
